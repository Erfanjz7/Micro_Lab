#include "LPC17xx.h"

void PWM_Init() {
    // 1. Enable power for PWM1
    LPC_SC->PCONP |= (1 << 6);

    // 2. Select P2.0 as PWM1.1 output (PWM1 channel 1)
    LPC_PINCON->PINSEL4 &= ~(3 << 0); // Clear bits 0 and 1
    LPC_PINCON->PINSEL4 |= (1 << 0);  // Set bit 0

    // 3. Set PWM1 clock prescaler
    LPC_PWM1->PR = 0; // Prescale to 0 to count in CPU cycles

    // 4. Set PWM1 period
    LPC_PWM1->MR0 = 1000; // Period of PWM

    // 5. Set initial duty cycle for PWM1.1
    LPC_PWM1->MR1 = 0; // Initially off

    // 6. Enable PWM Match register 0 and 1 latch
    LPC_PWM1->LER = (1 << 0) | (1 << 1);

    // 7. Enable PWM1
    LPC_PWM1->TCR = (1 << 0) | (1 << 3); // Enable counter and PWM mode

    // 8. Enable PWM1 output for channel 1
    LPC_PWM1->PCR = (1 << 9); // Enable PWM1 output
}

void PWM_SetDutyCycle(uint32_t duty) {
    // Set duty cycle for PWM1.1
    LPC_PWM1->MR1 = duty;
    LPC_PWM1->LER = (1 << 1); // Enable latch for MR1
}

int main() {
    PWM_Init();

    uint32_t dutyCycle = 0;
    int increment = 10;

    while(1) {
        PWM_SetDutyCycle(dutyCycle);

        // Simple delay
        for (volatile int i = 0; i < 100000; i++);

        // Update duty cycle
        dutyCycle += increment;
        if (dutyCycle >= 1000 || dutyCycle <= 0) {
            increment = -increment; // Reverse the direction of duty cycle change
        }
    }

    return 0;
}
